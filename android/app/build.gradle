def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def flutterAppName = localProperties.getProperty('flutter.appName')
if(flutterAppName == null) {
    flutterAppName = 'TDD Default'
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

/*
+~~~~~~+~~~~~~+~~~~~~~~~~~+
|  fg  |  bg  |  color    |
+~~~~~~+~~~~~~+~~~~~~~~~~~+
|  30  |  40  |  black    |
|  31  |  41  |  red      |
|  32  |  42  |  green    |
|  33  |  43  |  yellow   |
|  34  |  44  |  blue     |
|  35  |  45  |  magenta  |
|  36  |  46  |  cyan     |
|  37  |  47  |  white    |
|  39  |  49  |  default  |
+~~~~~~+~~~~~~+~~~~~~~~~~~+
 */

// define function get testBuildType based on build mode
def obtainTestBuildType() {
    def result = "debug";

    if (project.hasProperty("testBuildType")) {
        result = project.getProperties().get("testBuildType")
    }
    def style = "${(char)27}[32;"+"m"
    println(style+"ðŸ¥³ [obtainTestBuildType] $result")
    result
}

def configReleaseWithTestBuildType() {
    def result = true;

    if (project.hasProperty("testBuildType")) {
        def valueTestBuildType = project.getProperties().get("testBuildType");
        if(valueTestBuildType == "release") {
            result = false;
        }
    }
    def style = "${(char)27}[32;"+"m"
    println(style+"ðŸ¥³ [configReleaseWithTestBuildType] $result")
    result
}

android {
    testBuildType obtainTestBuildType()

    // fix error could run app --release
    lintOptions {
        checkReleaseBuilds false
    }

    compileSdkVersion flutter.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.flutter_tdd_new.flutter_tdd_new"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
        }
        profile {
            minifyEnabled false
            debuggable true
        }
        release {
            minifyEnabled configReleaseWithTestBuildType()
            shrinkResources configReleaseWithTestBuildType()
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

    // handle multiple environments

    flavorDimensions "flavors"
    productFlavors {
        dev {
            dimension "flavors"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
            resValue "string", "app_name", flutterAppName
        }
        stg {
            dimension "flavors"
            applicationIdSuffix ".stg"
            versionNameSuffix "-stg"
            resValue "string", "app_name", flutterAppName
        }
        prod {
            dimension "flavors"
            resValue "string", "app_name", flutterAppName
        }
    }
}

flutter {
    source '../..'
    target 'lib/main_dev.dart'
    target 'lib/main_staging.dart'
    target 'lib/main_production.dart'
}

dependencies {
    implementation 'androidx.multidex:multidex:2.0.1'
    testImplementation 'junit:junit:4.12'

    // https://developer.android.com/jetpack/androidx/releases/test/#1.2.0
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
